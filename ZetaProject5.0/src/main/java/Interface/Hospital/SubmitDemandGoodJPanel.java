/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.Hospital;

import Business.Enterprise.Enterprise;
import Business.Enterprise.HospitalEnterprise;
import Business.Network.Network;
import Business.Organization.DoctorOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.DemandGood;
import Business.WorkQueue.HospitalWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kathe
 */
public class SubmitDemandGoodJPanel extends javax.swing.JPanel {
    private JPanel userProcessContainer;
    private DoctorOrganization doctorOrganization;
    private HospitalEnterprise hospitalEnterprise;
    private UserAccount userAccount;
    private HospitalWorkRequest workrequest;
    /**
     * Creates new form DoctorWorkArea
     */
    public SubmitDemandGoodJPanel(JPanel userProcessContainer,UserAccount userAccount,HospitalEnterprise hospitalEnterprise ,HospitalWorkRequest workrequest) {
        initComponents();
        
        this.userProcessContainer=userProcessContainer;
        //this.doctorOrganization=doctorOrganization;
        this.hospitalEnterprise=hospitalEnterprise;
        this.userAccount=userAccount;
        this.workrequest = workrequest;
        populateTable();
    }

    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel) submitJTable.getModel();
        model.setRowCount(0);
        
        for(Map.Entry<String, DemandGood> entry : workrequest.getDemandGoodDirectory().getDemandGoodMap().entrySet()){
            Object[]row=new Object[3];
            //row[0]=workrequest;
            row[0]=workrequest.getRequestId();
            row[1]=entry.getValue().getName();
            row[2] = entry.getValue().getValue();
            
             model.addRow(row);
         }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        submitJTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        goodnameJTextField = new javax.swing.JTextField();
        quantityJTextField = new javax.swing.JTextField();
        submitJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        updateJButton = new javax.swing.JButton();
        deleteJButton = new javax.swing.JButton();

        submitJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "WorkRequest Id", "Demand Good Name", "Quantity"
            }
        ));
        submitJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                submitJTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(submitJTable);

        jLabel1.setText("Demand Good");

        jLabel2.setText("Quantity");

        goodnameJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goodnameJTextFieldActionPerformed(evt);
            }
        });

        quantityJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantityJTextFieldActionPerformed(evt);
            }
        });

        submitJButton.setText("Submit");
        submitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitJButtonActionPerformed(evt);
            }
        });

        backJButton.setText("<<back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        updateJButton.setText("Update");
        updateJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateJButtonActionPerformed(evt);
            }
        });

        deleteJButton.setText("Delete");
        deleteJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 55, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backJButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(submitJButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(79, 79, 79)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(updateJButton)
                                .addGap(18, 18, 18)
                                .addComponent(deleteJButton))
                            .addComponent(quantityJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(goodnameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(backJButton)
                .addGap(20, 20, 20)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(goodnameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(quantityJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateJButton)
                    .addComponent(submitJButton)
                    .addComponent(deleteJButton))
                .addContainerGap(79, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void goodnameJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goodnameJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_goodnameJTextFieldActionPerformed

    private void quantityJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantityJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quantityJTextFieldActionPerformed

    private void submitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitJButtonActionPerformed
        // TODO add your handling code here:
        String name=goodnameJTextField.getText();
        System.out.println(name);
        String quantity=String.valueOf(quantityJTextField.getText());
 
        if (name== null ||name.trim().isEmpty()){
            JOptionPane.showMessageDialog(null, "Please input the Demand Good!", "CREATE", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
         if (quantity== null ||quantity.trim().isEmpty()){
            JOptionPane.showMessageDialog(null, "Please input the Quantity!", "CREATE", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        Integer q;
        try {
            q = Integer.parseInt(quantity);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid number format! ");
            return;
        }
        
        if(Integer.parseInt(quantity)<=0){
            JOptionPane.showMessageDialog(null, "Demand good must be a positive number!"); 
            quantityJTextField.setText("");
            return;
        }
        
        for(Map.Entry<String, DemandGood> entry : workrequest.getDemandGoodDirectory().getDemandGoodMap().entrySet()){
            if(name==null?entry.getValue().getName()==null:name.equalsIgnoreCase(entry.getValue().getName())){
                JOptionPane.showMessageDialog(null,"The good already exists!");
                goodnameJTextField.setText("");
                quantityJTextField.setText("");               
                return;
            }
        }
       
        DemandGood dg=new DemandGood(name, q);
        dg.setName(name);
        dg.setValue(q);
        
        workrequest.getDemandGoodDirectory().addDemandGood(dg);
     
        goodnameJTextField.setText("");
        quantityJTextField.setText("");
        populateTable();
        JOptionPane.showMessageDialog(null,"The good submit sucessfully!");
        
    }//GEN-LAST:event_submitJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
//        DoctorWorkArea dwjp = (DoctorWorkArea) component;
//        dwjp.populateTable();
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void updateJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = submitJTable.getSelectedRow();
  
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null, "Please select a Row!!");
            goodnameJTextField.setText("");
            quantityJTextField.setText("");
            return;
        }
        
        goodnameJTextField.setEditable(false);
        String goodname = goodnameJTextField.getText();
        String quantity = quantityJTextField.getText();
        
        for(Map.Entry<String, DemandGood> entry : workrequest.getDemandGoodDirectory().getDemandGoodMap().entrySet()){
            if(goodname.equals(entry.getValue().getName())&&quantity.equals(entry.getValue().getValue()+"")){
                JOptionPane.showMessageDialog(null,"This good's information is same!");
               // goodnameJTextField.setText("");
                quantityJTextField.setText("");
                return;
            }
        }

        if (goodname== null ||goodname.isEmpty()){
            JOptionPane.showMessageDialog(null, "Please input update information!", "CREATE", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        Integer q;
        try {
            q = Integer.parseInt(quantity);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid number format! ");
            return;
        }
        
        if(Integer.parseInt(quantity)<=0){
            JOptionPane.showMessageDialog(null, "Demand good must be a positive number!"); 
            quantityJTextField.setText("");
            return;
        }

        String gn = (String) submitJTable.getValueAt(selectedRow, 1);
        
        workrequest.getDemandGoodDirectory().getDemandGoodMap().get(gn).setName(gn);
        workrequest.getDemandGoodDirectory().getDemandGoodMap().get(gn).setValue(Integer.parseInt(quantity));

        populateTable();
        goodnameJTextField.setText("");
        quantityJTextField.setText("");
        JOptionPane.showMessageDialog(null, "This good is updated successfully!");
              
    }//GEN-LAST:event_updateJButtonActionPerformed

    private void deleteJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = submitJTable.getSelectedRow();
       
        if(selectedRow >= 0){
            int selectionButton = JOptionPane.YES_NO_OPTION;
            int selectionResult = JOptionPane.showConfirmDialog(null, "Are you sure to delete?", "Warning", selectionButton);
            
            if(selectionResult == JOptionPane.YES_OPTION){
              
             //
            String gn = (String) submitJTable.getValueAt(selectedRow, 1);
            
            for(Map.Entry<String, DemandGood> entry : workrequest.getDemandGoodDirectory().getDemandGoodMap().entrySet()){
            if(gn==null?entry.getValue().getName()==null:gn.equalsIgnoreCase(entry.getValue().getName())){
               
                
                workrequest.getDemandGoodDirectory().getDemandGoodMap().remove(entry.getKey());     
              break;  
            }
        }

            populateTable(); 
            goodnameJTextField.setText("");
            quantityJTextField.setText("");
            JOptionPane.showMessageDialog(null, "Delete Successfully!");
            }
        }else
        {
            JOptionPane.showMessageDialog(null, "Please select a Row!!");  
            goodnameJTextField.setText("");
            quantityJTextField.setText("");   
        }
    }//GEN-LAST:event_deleteJButtonActionPerformed

    private void submitJTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_submitJTableMouseClicked
        // TODO add your handling code here:
         int selectedRow = submitJTable.getSelectedRow();
         
         if(selectedRow >= 0){
             String gn = (String) submitJTable.getValueAt(selectedRow, 1);
             goodnameJTextField.setText(workrequest.getDemandGoodDirectory().getDemandGoodMap().get(gn).getName());
             quantityJTextField.setText(workrequest.getDemandGoodDirectory().getDemandGoodMap().get(gn).getValue()+"");
          }
             
        
    }//GEN-LAST:event_submitJTableMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JButton deleteJButton;
    private javax.swing.JTextField goodnameJTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField quantityJTextField;
    private javax.swing.JButton submitJButton;
    private javax.swing.JTable submitJTable;
    private javax.swing.JButton updateJButton;
    // End of variables declaration//GEN-END:variables
}
